name: Python CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
      # Clona el código del repositorio
      - uses: actions/checkout@v4

      # Configura la versión de Python según la versión definida en matrix
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Cache de paquetes pip para acelerar la instalación
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 🔄 Actualiza pip e instala pip-tools (es mejor actualizar pip antes)
      - name: Upgrade pip and install pip-tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools

      # 🛠️ Compila requirements.txt a partir de requirements.in
      - name: Compile requirements.txt desde requirements.in
        run: |
          pip-compile requirements.in

      # 🧪 Verifica que requirements.txt esté actualizado respecto a requirements.in
      - name: Verificar que requirements.txt está actualizado
        run: |
          pip-compile requirements.in --quiet
          git diff --exit-code requirements.txt

      # 🧰 Instala dependencias necesarias para test y formateo
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-django black

      # 🧹 Verifica el formato del código con Black
      - name: Check code formatting with Black
        run: |
          black --check .

      # --- INICIO: Configuración para frontend (carpeta client) ---

      # 🧩 Configura Node.js para usar herramientas del frontend
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # 📦 Instala dependencias del frontend en la carpeta `client`
      - name: Install frontend dependencies
        run: |
          cd client
          npm ci

      # 🔍 Ejecuta ESLint para verificar calidad del código JS/React
      - name: Run ESLint
        run: |
          cd client
          npx eslint . --max-warnings=0

      # 🧼 Verifica el formato con Prettier para archivos JS, JSON, CSS y MD
      - name: Check Prettier formatting
        run: |
          cd client
          npx prettier --check "**/*.{js,jsx,json,css,md}"

      # --- FIN: Configuración para frontend ---

      # 📈 Sube el reporte de cobertura (si usas pytest-cov)
      - name: Upload coverage report
        if: always() # Sube el reporte incluso si fallan los tests
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: ./coverage.xml
