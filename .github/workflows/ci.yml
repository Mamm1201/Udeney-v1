name: Python CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
      - uses: actions/checkout@v4

      # Configuración del entorno Python según la versión del matrix
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Cache para acelerar la instalación de paquetes pip
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Instalación de dependencias Python necesarias para tests y formateo
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-django black

      # Verificación de formato de código Python usando Black
      - name: Check code formatting with Black
        run: |
          black --check .

      # --- INICIO: Configuración para frontend (carpeta client) ---

      # Instalación de Node.js para ejecutar herramientas de frontend
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # Instalación de dependencias del frontend ubicadas en client/
      - name: Install frontend dependencies
        run: |
          cd client
          npm ci

      # Ejecución de ESLint para verificar calidad y errores en el código JS/React
      - name: Run ESLint
        run: |
          cd client
          npx eslint . --max-warnings=0

      # Verificación del formato con Prettier para archivos JS, JSON, CSS y MD
      - name: Check Prettier formatting
        run: |
          cd client
          npx prettier --check "**/*.{js,jsx,json,css,md}"

      # --- FIN: Configuración para frontend ---

      # Opcional: Subir reporte de cobertura como artifact (si usas pytest-cov)
      - name: Upload coverage report
        if: always() # Sube el reporte incluso si fallan los tests
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: ./coverage.xml
